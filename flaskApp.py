# -*- coding: utf-8 -*-
"""FlaskAPP.ipynb

Automatically generated by Colaboratory.

Original file is located at
  https://colab.research.google.com/drive/1ixEawdXP_un6GrkgjCr1laZuL57JeOAP

# **How To Use in Production**
"""

!pip install pyngrok==4.1.1

!curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

!ls

!ngrok authtoken 2ACrflX7ISTfvzCu6OgVaSmDiPo_2iByuhwjyTdnwXfsZHGtf

!pip install flask_ngrok

!pip install farasapy

import sys
import pickle

experiment_folder = '/content/drive/My Drive/sentiment_analysis_project'
sys.path.append(experiment_folder)

vectorizer = pickle.load(open(f'{experiment_folder}/vectorizer.pkl', 'rb'))
logistic_reg = pickle.load(open(f'{experiment_folder}/logistic_reg.pkl', 'rb'))
mnb = pickle.load(open(f'{experiment_folder}/mnb.pkl', 'rb'))
svm = pickle.load(open(f'{experiment_folder}/svm.pkl', 'rb'))
rf = pickle.load(open(f'{experiment_folder}/rf.pkl', 'rb'))
mlp = pickle.load(open(f'{experiment_folder}/mlp.pkl', 'rb'))

neu_vectorizer = pickle.load(open(f'{experiment_folder}/neu_vectorizer.pkl', 'rb'))
neu_logistic_reg = pickle.load(open(f'{experiment_folder}/neu_logistic_reg.pkl', 'rb'))
neu_mnb = pickle.load(open(f'{experiment_folder}/neu_mnb.pkl', 'rb'))
neu_svm = pickle.load(open(f'{experiment_folder}/neu_svm.pkl', 'rb'))
neu_rf = pickle.load(open(f'{experiment_folder}/neu_rf.pkl', 'rb'))
neu_mlp = pickle.load(open(f'{experiment_folder}/neu_mlp.pkl', 'rb'))

def predict_multi_level(X, neu_mlp, neu_clf, mlp, clf):
    #return clf.predict(vectorizer.transform(X))
    neu_y_pred = neu_clf.predict(neu_mlp.transform(X))
    if len(X[neu_y_pred == 'NonNeutral']) > 0:
        y_pred = clf.predict(mlp.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
        neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
    
    final_y_pred = neu_y_pred
    return final_y_pred

def predict_ByUser(X,predict,clf,neu_clf,neu_svm,svm):
      neu_y_pred = neu_clf.predict(neu_svm.transform(X))
      if len(X[neu_y_pred == 'NonNeutral']) > 0:
        if(predict==vectorizer):
           y_pred = clf.predict(vectorizer.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
           neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
        elif (predict==logistic_reg):
           y_pred = clf.predict(logistic_reg.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
           neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
        elif(predict==mnb):
           y_pred = clf.predict(mnb.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
           neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
        elif(predict==svm):
           y_pred = clf.predict(svm.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
           neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
        elif(predict==rf):
           y_pred = clf.predict(rf.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
           neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
        else:
           y_pred = clf.predict(mlp.transform(X[neu_y_pred == 'NonNeutral'])) # classify non neutral into positive or negative
           neu_y_pred[neu_y_pred == 'NonNeutral'] = y_pred
  
      final_y_pred = neu_y_pred
      return final_y_pred

"""# **Flask App To Serve Our Models**"""

import aranorm as aranorm
import numpy as np

from flask import Flask, flash, request, redirect, url_for
from werkzeug.utils import secure_filename
from flask_ngrok import run_with_ngrok

app = Flask(__name__)
run_with_ngrok(app)   


@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'input_text' not in request.form:
            flash('No text found!')
            return redirect(request.url)

        text = request.form['input_text']
        # text = stemmer.stem(text)
        text = aranorm.normalize_arabic_text(text)
        if text == '':
            return 'Please, write an Arabic sentance. Symbols and non-Arabic characters will be removed from the text....'
        print(f'text: {text}')
        predcited_sentiment = predict_multi_level(np.array([text]), neu_vectorizer, neu_svm, vectorizer, mnb)
        predcited_sentiment = str(predcited_sentiment.squeeze())
        print("Predicted Sentiment:", predcited_sentiment)
        return predcited_sentiment
    
    return '''<!doctype html>
<title>تحليل المشاعر من التغريدات</title>
<script>
function myFunction()
{
    // clear the output text box from the text
    output_text_box = document.getElementById('output_text');
    output_text_box.innerHTML = '';
   
    var elements = document.getElementsByClassName("formVal");
    var formData = new FormData(); 
    
    for(var i=0; i<elements.length; i++)
    {
        formData.append(elements[i].name, elements[i].value);
    }
    var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function()
        {
            if(xmlHttp.readyState == 4 && xmlHttp.status == 200)
            {
                response = xmlHttp.responseText;
                output_text_box = document.getElementById('output_text');
                console.log(response);
                output_text_box.innerHTML = response;
            }
        }
        xmlHttp.open("post", "/"); 
        xmlHttp.send(formData); 
}
</script>
<h1>تحليل المشاعر من التغريدات</h1>
<p>مثال: أحب أمي و أبي</p>
<form method=post enctype=multipart/form-data>
  <textarea id="input_text"class='formVal' rows="5" cols="50" type="text" name="input_text" placeholder="التغريدة"></textarea> <br>
  <textarea id="output_text" class='formVal' rows="5" cols="50" type="text" name="output_text" placeholder="المشاعر المتوقعة"></textarea>
  <input type="submit" value="submit_now" onclick="myFunction(); return false;">
</form>

</html>
    '''
app.run()

"""## Flask App V1.2

import aranorm as aranorm
import numpy as np

from flask import Flask, flash, request, redirect, url_for, render_template
from werkzeug.utils import secure_filename
from flask_ngrok import run_with_ngrok

app = Flask(__name__)
run_with_ngrok(app)   


@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'input_text' not in request.form:
            flash('No text found!')
            return redirect(request.url)
        predict = request.form.get('comp_select')
        neu_predict = request.form.get('comp_select_neutral')
        text = request.form['input_text']
        # text = stemmer.stem(text)
        text = aranorm.normalize_arabic_text(text)
        if text == '':
            return 'Please, write an Arabic sentance. Symbols and non-Arabic characters will be removed from the text....'
        print(f'text: {text}')
        predcited_sentiment = predict_multi_level(np.array([text]), neu_mlp, neu_predict, mlp, predict)
        predcited_sentiment = str(predcited_sentiment.squeeze())
    
        print("Predicted Sentiment:", predcited_sentiment)
        return predcited_sentiment
    
    return render_template('content/drive/My Drive/sentiment_analysis_project/index.html')

app.run()
"""



